<main class="flex justify-center py-10">
    <div class="timeline relative">
        <!-- Item 10 -->
        <div class="timeline-item timeline-item-right text-center">
            <p class="text-sm text-gray-500 mb-2">02 Dec 2013</p>
            <video
                autoplay
                muted
                loop
                src="/videos/1.mp4"
                class="hover:scale-110 transition opacity-0"></video>
        </div>

        <!-- Item 11 -->
        <div class="timeline-item timeline-item-left text-center">
            <p class="text-sm text-gray-500 mb-2">28 Nov 2013</p>
            <video
                loop
                autoplay
                muted
                src="/videos/2.mp4"
                class="hover:scale-110 transition opacity-0"></video>
        </div>

        <!-- Item 12 -->
        <div class="timeline-item timeline-item-right text-center">
            <p class="text-sm text-gray-500 mb-2">02 Dec 2013</p>
            <video
                loop
                autoplay
                muted
                src="/videos/3.mp4"
                class="hover:scale-110 transition opacity-0"></video>
        </div>

        <!-- Item 13 -->
        <div class="timeline-item timeline-item-left text-center">
            <p class="text-sm text-gray-500 mb-2">28 Nov 2013</p>
            <video
                loop
                autoplay
                muted
                src="/videos/4.mp4"
                class="hover:scale-110 transition opacity-0"></video>
        </div>
    </div>
</main>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const observerOptions: IntersectionObserverInit = {
            root: null,
            rootMargin: "0px",
            threshold: 0.5, // Ajusta este valor para controlar cuÃ¡ndo el elemento se vuelve visible
        };

        const observerCallback: IntersectionObserverCallback = (
            entries: IntersectionObserverEntry[],
            observer: IntersectionObserver,
        ) => {
            entries.forEach((entry) => {
                const element = entry.target as HTMLElement;
                if (entry.isIntersecting) {
                    element.classList.add("show");
                } else {
                    element.classList.remove("show");
                }
            });
        };

        const observer: IntersectionObserver = new IntersectionObserver(
            observerCallback,
            observerOptions,
        );

        const items: NodeListOf<HTMLElement> = document.querySelectorAll(
            ".timeline-item img, .timeline-item video",
        );
        items.forEach((item) => {
            observer.observe(item);
        });
    });
</script>
<style>
    html {
        flex: auto;
        justify-content: center;
        align-items: center;
    }

    .timeline::before {
        content: "";
        position: absolute;
        width: 1px;
        background-color: orange;
        top: 0;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        align-items: center;
        justify-content: center;
    }

    .timeline-item {
        position: relative;
        width: 100%;
    }

    .timeline-item-left {
        right: 50%;
        padding-right: 1rem;
    }

    .timeline-item-right {
        left: 50%;
        padding-left: 1rem;
    }

    img,
    video {
        border-radius: 100%;
        width: 150px;
        height: 150px;
        border-width: 5px;
        opacity: 0;
        transition:
            opacity 0.5s ease,
            transform 0.5s ease;
    }

    img.show,
    video.show {
        opacity: 1;
        transform: scale(1);
    }
</style>
