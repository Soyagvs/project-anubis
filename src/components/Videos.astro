<main class="flex justify-center py-10">
    <div class="timeline relative">
        <!-- Item 10 -->
        <div
            class="timeline-item timeline-item-right text-center hover:scale-110"
        >
            <video
                autoplay
                muted
                loop
                src="/videos/1.mp4"
                class="opacity-0"
                preload="auto"></video>
        </div>

        <!-- Item 11 -->
        <div
            class="timeline-item timeline-item-left text-center hover:scale-110"
        >
            <video
                loop
                autoplay
                muted
                src="/videos/2.mp4"
                class="opacity-0"
                preload="auto"></video>
        </div>

        <!-- Item 12 -->
        <div
            class="timeline-item timeline-item-right text-center hover:scale-110"
        >
            <video
                loop
                autoplay
                muted
                src="/videos/3.mp4"
                class="opacity-0"
                preload="auto"></video>
        </div>

        <!-- Item 13 -->
        <div
            class="timeline-item timeline-item-left text-center hover:scale-110"
        >
            <video
                loop
                autoplay
                muted
                src="/videos/4.mp4"
                class="opacity-0"
                preload="auto"></video>
        </div>
    </div>
</main>

<!-- Modal Background -->
<div
    id="modal-bg"
    class="hidden fixed inset-0 bg-black bg-opacity-65 items-center justify-center"
>
    <!-- Modal -->
    <div
        id="modal"
        class="relative bg-white p-4 rounded-lg w-3/4 md:w-1/2 lg:w-1/3"
    >
        <span
            id="modal-close"
            class="absolute top-2 right-2 cursor-pointer z-50 text-orange-400 text-3xl font-extrabold bg-white rounded-full w-12 items-center h-12 justify-center flex"
            >X</span
        >
        <div id="modal-content"></div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const observerOptions: IntersectionObserverInit = {
            root: null,
            rootMargin: "0px",
            threshold: 0.5, // Ajusta este valor para controlar cuÃ¡ndo el elemento se vuelve visible
        };

        const observerCallback: IntersectionObserverCallback = (
            entries: IntersectionObserverEntry[],
            observer: IntersectionObserver,
        ) => {
            entries.forEach((entry) => {
                const element = entry.target as HTMLElement;
                if (entry.isIntersecting) {
                    element.classList.add("show");
                } else {
                    element.classList.remove("show");
                }
            });
        };

        const observer: IntersectionObserver = new IntersectionObserver(
            observerCallback,
            observerOptions,
        );

        const items: NodeListOf<HTMLElement> = document.querySelectorAll(
            ".timeline-item img, .timeline-item video",
        );
        items.forEach((item) => {
            observer.observe(item);
        });

        // Modal functionality
        const modalBg = document.getElementById("modal-bg") as HTMLElement;
        const modal = document.getElementById("modal") as HTMLElement;
        const modalContent = document.getElementById(
            "modal-content",
        ) as HTMLElement;
        const modalClose = document.getElementById(
            "modal-close",
        ) as HTMLElement;

        items.forEach((item) => {
            item.addEventListener("click", () => {
                modalContent.innerHTML = "";
                if (item.tagName.toLowerCase() === "video") {
                    const videoClone = item.cloneNode(true) as HTMLVideoElement;
                    videoClone.classList.remove("opacity-0");
                    videoClone.classList.add("opacity-100");
                    modalContent.appendChild(videoClone);
                } else if (item.tagName.toLowerCase() === "img") {
                    const imgClone = item.cloneNode(true) as HTMLImageElement;
                    modalContent.appendChild(imgClone);
                }
                modalBg.classList.add("show");
            });
        });

        modalClose.addEventListener("click", () => {
            modalBg.classList.remove("show");
        });

        modalBg.addEventListener("click", (event) => {
            if (event.target === modalBg) {
                modalBg.classList.remove("show");
            }
        });
    });
</script>
